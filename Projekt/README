Link do serwera: https://discord.gg/cRjg2g8HnT
Zaprosic bota na serwer: https://discord.com/api/oauth2/authorize?client_id=915169888379736077&permissions=8&scope=bot
**(P.S. Server doesn't work)**

---

# """_ Jak to dziala _"""

### main.py
        __line 14__ >> funkcja on_ready() wypisuje komunicat, ze bot zostal sie zalogowany na serwer Discord'a
            {0.user} - nazwa Bot'u, .format(client) transformuje nazwe w zrozumiala dla uzytkownika
            logging_bot("Bot started") - Zapisuje w .log date i czas startu bot'u (nizej przedstawiono logging_bot.py)

        __line 20__ >> funkcja otrzymuje `Message` od uzytkownika, napisany na serwerze Discord'a
            __line 21__ >> `if ..` przerywa dzialanie funkcji, jezeli otrzymany `Message` jest od samego bot'a

            __line 24__ >> jezeli 'Message` zaczyna sie of `/exchange`, wtedy jest wywolana funkcja `currency.get_currency_price()` (dalej exchange_rate.py),
                zmienna `course` otrzyma dane o kursu walut typu `list`. 
                W liscie `message_list` dane transformuja sie dla mozliwosci wysylania i odczytania przez uzytkownika
                W .log zostaje sie zapisany komunikat o prawidlowym wykonaniu bloku kodu

            __line 43__ >> jezeli 'Message` zaczyna sie of `/exit`, wtedy jest wywolana funkcja quit(0) - wylaczenie bot'a
                Przed tym, do .log zapisuje sie komunikat o wylaczeniu bot'a
    
        __line 49__ >> wlaczenie bot'a

### exchange_rate.py
        __lines 6-9__ >> Linki do kursu walut (google.com > PLN to USD, itd.)
        __line 12__ >> wysyla przez `https` dane o wykorzystanej przegladarce, zeby nie bylo problemow z `Bot protection`
        __lines 17-20__ >> sciÄ…ganie strony internetowej za dla znalezienia kursu walut
        __lines 23-26__ >> transformuje strone w format tekstowy, za dla znalezienia danych
        __lines 29-32__ >> zgodnie z struktura `html`, znachodze potrzebowane kursy walut
        __lines 34-35__ >> zwraca kursy walut, typ danych `list`
        __line 38__ >> jezeli plik wywolany jako glowny, kursy walut wypisuja sie przez standardowe wyjscie print()

### logging_bot.py ##
        __line 3__ >> funkcja otrzymuje `Message`, ktory trzeba zapisac do .log
        __line 4__ >> funkcja `open()` otwiera plik w metoda `a` - dopisywanie danych
        __line 5__ >> zapisuje dane fomatem: `[~Date-Time~]. Message `%message``
        __line 6__ >> zachowuje plik i zanyka go
        __line 8__ >> jezeli plik wywolany jako glowny, dane .log wypisuja sie przez standardowe wyjscie print()

---

# """_ Jak sie korzystac _"""

### main.py ##
        Po wlaczaniu, bot jest dostepny na serwerze. Wszystkie dzialania ida przez serwer:
        /exchange - wypisuje kursy walut
        /exit - wylacza bot'a
        Ctrl-Z - wylacza bot'a (RuntimeError)

### exchange_rate.py ##
        jezeli plik wywolany jako glowny, kursy walut wypisuja sie przez standardowe wyjscie print()

### logging_bot.py ##
        jezeli plik wywolany jako glowny, dane .log wypisuja sie przez standardowe wyjscie print()

---

# """_ Przydatne linki _"""

    > __python__ : 
    < https://docs.python.org/3/

    > __discord.py__ : 
    < https://discordpy.readthedocs.io/en/stable/#extensions
    < https://discordpy.readthedocs.io/en/stable/api.html#discord.Permissions

    > __How to create Bot Discord__ : 
    < https://discordpy.readthedocs.io/en/stable/discord.html
    < https://betterprogramming.pub/coding-a-discord-bot-with-python-64da9d6cade7

    > __time__ : 
    < https://docs.python.org/3/library/time.html

    > __BeautifulSoup__ : 
    < https://www.crummy.com/software/BeautifulSoup/bs4/doc/
